{"version":3,"sources":["components/Notes.jsx","components/Notification.jsx","noteService.js","components/App.jsx","index.jsx"],"names":["Note","item","toggleImportanceOf","onClick","id","content","important","Notification","message","baseUrl","process","axios","get","then","response","data","newObject","post","console","log","put","App","useState","notes","setNotes","newNote","setNewnote","showAll","setShowAll","errorMessage","setErrorMessage","notesToShow","filter","note","find","n","changedNote","noteService","returnedNote","map","catch","error","setTimeout","useEffect","reverse","key","onSubmit","event","preventDefault","noteTosave","length","date","Date","now","toString","Math","random","concat","value","onChange","e","target","inputHandler","type","ReactDOM","render","StrictMode","noteDataArray","document","getElementById"],"mappings":"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","file":"static/js/main.b23a4f8f.chunk.js","sourcesContent":["import React from 'react' \n\nconst Note = ({item,toggleImportanceOf}) => {\nreturn <li ><button onClick={()=>toggleImportanceOf(item.id)} >toggle importance </button> {item.content}  <em>{`${item.important ? 'Important' : ''}`}</em> </li>\n  }\n\nexport default Note\n  ","import React from 'react';\n\nconst Notification = ({message}) => {\n\n    if (message === null) {\n        return null\n        \n    }\n\n    return (\n        <div>\n        {message}\n        </div>\n    );\n}\n\nexport default Notification;\n","import axios from \"axios\";\n\nconst PORT = process.env.REACT_APP_PORT_API || 3001\n\nconst baseUrl = process.env.REACT_APP_MODE === \"development\" ?  `http://localhost:${PORT}/api/notes` : `/api/notes`\n// const baseUrl =`http://localhost:3001/api/notes` \n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request.then(response => response.data);\n};\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(response => {\n        console.log('response',response.data)\n        return response.data\n    });\n};\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then(response => response.data);\n};\n\nconst deletePerson = id => {\n    const request = axios.delete(`${baseUrl}/${id}`);\n    return request.then(response => response.data);\n};\n\nexport default {\n     getAll,\n     create,\n     update,\n     deletePerson\n};\n","import React, { useState, useEffect } from 'react'\nimport Note from './Notes'\nimport Notification from './Notification'\nimport noteService from '../noteService'\n\nconst App = () => {\n  const [notes, setNotes] = useState()\n  const [newNote, setNewnote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const addNote = event => {\n    event.preventDefault()\n\n    const noteTosave = {\n      id: notes.length + 1,\n      content: newNote,\n      date: new Date(Date.now()).toString(),\n      important: Math.random() < 0.5\n    }\n\n    if (newNote === '') {\n      setNewnote('')\n      setErrorMessage('Notes can not be empty')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 3000)\n      return\n    }\n\n    noteService\n      .create(noteTosave)\n      .then(returnedNote => {    \n        setNotes([...notes].concat(returnedNote))\n        setNewnote('')\n        setErrorMessage('note added')\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 3000)\n      })\n      .catch(error => {\n        setErrorMessage(error.message)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== noteTosave.id))\n      })\n  }\n\n  const inputHandler = e => {\n    setNewnote(e.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n\n    const changedNote = { ...note, important: !note.important }\n    delete changedNote.id\n    noteService\n      .update(note.id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote)))\n      })\n      .catch(error => {\n        setErrorMessage(error.message)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  useEffect(() => {\n    noteService.getAll().then(response => {\n      // console.log(response)\n      setNotes(response.reverse())\n    })\n  }, [])\n\n  return (\n    <div>\n      <Notification message={errorMessage} />\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow &&\n          notesToShow.map(item => (\n            <Note\n              key={item.id}\n              item={item}\n              toggleImportanceOf={toggleImportanceOf}\n            />\n          ))}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={e => inputHandler(e)} />\n        <button type='submit'>save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nconst notes = [\n  {\n    id:1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id:2,\n    content: 'Browser can execute only Javascript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id:3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App noteDataArray={notes} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}